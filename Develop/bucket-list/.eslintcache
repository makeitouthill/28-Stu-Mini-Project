[{"C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\index.js":"1","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\App.js":"2","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\BucketList.js":"3","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\BucketForm.js":"4","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\Bucket.js":"5"},{"size":197,"mtime":1677779263474,"results":"6","hashOfConfig":"7"},{"size":192,"mtime":1677779263471,"results":"8","hashOfConfig":"7"},{"size":1841,"mtime":1677779263473,"results":"9","hashOfConfig":"7"},{"size":2601,"mtime":1677779263472,"results":"10","hashOfConfig":"7"},{"size":1744,"mtime":1677794525952,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"f14kjj",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\index.js",[],["25","26"],"C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\App.js",[],"C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\BucketList.js",["27"],"import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    \n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      \n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n\n\n    // TODO: Update the bucket state variable\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\BucketForm.js",["28"],"import React, { useState } from 'react';\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  // TODO: Use this array in the return statement below\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={}>Must do</p>\n            <p onClick={}>Want to do</p>\n            <p onClick={}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={}>Must do</p>\n            <p onClick={}>Want to do</p>\n            <p onClick={}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","C:\\Users\\Alex\\Desktop\\My-Class-Repo\\course-content\\19-React\\activities\\28-Stu_Mini-Project\\Develop\\bucket-list\\src\\components\\Bucket.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":18,"column":43,"nodeType":"35","messageId":"36","endLine":18,"endColumn":45},{"ruleId":null,"fatal":true,"severity":2,"message":"37","line":50,"column":24},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Parsing error: JSX attributes must only be assigned a non-empty expression.\n\n\u001b[0m \u001b[90m 48 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"dropdown-content\"\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 49 |\u001b[39m             {\u001b[90m/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */\u001b[39m}\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 50 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mp\u001b[39m onClick\u001b[33m=\u001b[39m{}\u001b[33m>\u001b[39m\u001b[33mMust\u001b[39m \u001b[36mdo\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mp\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 51 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mp\u001b[39m onClick\u001b[33m=\u001b[39m{}\u001b[33m>\u001b[39m\u001b[33mWant\u001b[39m to \u001b[36mdo\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mp\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 52 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mp\u001b[39m onClick\u001b[33m=\u001b[39m{}\u001b[33m>\u001b[39m\u001b[33mTake\u001b[39m it or leave it\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mp\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 53 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]